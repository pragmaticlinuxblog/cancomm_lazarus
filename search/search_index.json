{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#introduction","title":"Introduction","text":"<p> <code>TCanSocket</code> is a Lazarus component for convenient and easy-to-use access to CAN communication. Perfect for when your Lazarus application should participate or monitor the communication on a Controller Area Network. Under the hood, it uses the SocketCAN functionality of the Linux kernel.</p> <p></p> <p>Supported functionality:</p> <ul> <li>List all SocketCAN devices known to your Linux system.</li> <li>Transmit and receive CAN messages.</li> <li>Event handlers for:</li> <li>Reception of CAN messages and error frames.</li> <li>Transmit completed of a CAN message.</li> <li>Connect and disconnect events.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>The following requirements need to be met, before you can use the <code>TCanSocket</code> component:</p> <ol> <li>Lazarus is installed on your Linux system. The following article explains this step-by-step:<ul> <li>How to install the Lazarus IDE on Linux</li> </ul> </li> <li>The LibCanComm shared library (including its development package) is installed on your Linux system:<ul> <li>Install the LibCanComm shared library on Linux</li> </ul> </li> <li>You already configured and brought your CAN adapter online. If not, follow one of these tutorials:<ul> <li>How to create a virtual CAN interface on Linux</li> <li>Automatically bring up a SocketCAN interface on boot</li> <li>CAN communication on the Raspberry PI with SocketCAN</li> </ul> </li> </ol>"},{"location":"#installation","title":"Installation","text":"<p>To install the <code>TCanSocket</code> component, download the latest stable release from the GitHub project:</p> <ul> <li>Download the latest stable release of <code>TCanSocket</code></li> </ul> <p>Next, extract the downloaded archive and open the <code>socketcan.lpk</code> package file from the <code>source/</code> subdirectory:</p> <p></p> <p>Once opened, select Install from the Use menu and click Yes when prompted to rebuild the Lazarus IDE:</p> <p></p> <p>After Lazarus completes rebuilding itself, it automatically restarts. Afterwards, you can find the <code>TCanSocket</code> component on the System tab of the Component Palette.</p>"},{"location":"#demo-application","title":"Demo application","text":"<p>To test that everything works, the archive you downloaded includes a demo application. You can find it in the <code>demo/</code> subdirectory. Its project file is called <code>SocketCanDemo.lpi</code>. The application demonstrates how to connect to a SocketCAN device and how to transmit and receive CAN messages. It logs all transmitted and received CAN messages to a <code>TMemo</code>:</p> <p></p>"},{"location":"#license","title":"License","text":""},{"location":"tcanmsg/","title":"TCanMsg","text":"<p>A record for grouping all CAN message related data.</p> <pre><code>type TCanMsg = packed record\nId: LongWord;\nExt: Boolean;\nLen: Byte;\nData: array [0..(CANMSG_FD_MAX_DATA_LEN-1)] of Byte;\nFlags : bitpacked record\nFd: Boolean;\nErr: Boolean;\nend;\nTimestamp: QWord;\nend;\n</code></pre>"},{"location":"tcanmsg/#fields","title":"Fields","text":"Name Description <code>Id</code> CAN message identifier. <code>0..$7FF</code> for 11-bit CAN identifiers, <code>0..$1FFFFFFF</code> for 29-bit CAN identifiers. <code>Ext</code> <code>True</code> for a 29-bit CAN identifier, <code>False</code> for an 11-bit CAN identifier. <code>Len</code> Number of data bytes inside the CAN message. <code>0..8</code> for CAN classic messages. <code>0..8</code>, <code>12</code>, <code>16</code>, <code>20</code>, <code>24</code>, <code>32</code>, <code>48</code> or <code>64</code> for CAN FD messages. <code>Data</code> Array with message data bytes. <code>Flags</code> Message related flags:  <code>Fd</code> - <code>True</code> for a CAN FD message, <code>False</code> for a CAN classic message. <code>Err</code> - <code>True</code> if the message is an error frame, <code>False</code> for a data frame (only used internally). <code>Timestamp</code> Timestamp in microseconds of when the CAN message was transmitted or received. Example - Declaring and initializing a TCanMsg variable:<pre><code>procedure TForm1.BtnTransmitClick(Sender: TObject);\nvar\nTxMsg: TCanMsg;\nbegin\nTxMsg.Id := $123;         // Set the CAN message identifier\nTxMsg.Ext := False;       // Set the identifier type to 11-bit\nTxMsg.Flags.Fd := False;  // Configure the message as CAN classic\nTxMsg.Flags.Err := False; // CAN data frame\nTxMsg.Len := 2;           // Set the data length to 2 bytes\nTxMsg.Data[0] := $37;     // Set the value of data byte 0\nTxMsg.Data[1] := $A5;     // Set the value of data byte 1\n// Transmit the CAN message.\nCanSocket1.Transmit(TxMsg);\nend;\n</code></pre>"},{"location":"tcansocket/","title":"TCanSocket","text":"<p> A Lazarus component for convenient and easy-to-use access to CAN communication, using the SocketCAN functionality of the Linux kernel.</p> <pre><code>type TCanSocket = class(TComponent)\npublic\nfunction    Connect: Boolean;\nprocedure   Disconnect; function    Transmit(var Msg: TCanMsg): Boolean;\nfunction    FormatMsg(constref Msg: TCanMsg): string;\nproperty    Connected: Boolean;\nproperty    Devices: TCanDevices;\npublished\nproperty    Device: string;\nproperty    OnTransmitted: TCanMsgTransmittedEvent;\nproperty    OnReceived: TCanMsgReceivedEvent;\nproperty    OnErrorFrame: TCanErrFrameReceivedEvent;\nproperty    OnConnected: TCanConnectedEvent;\nproperty    OnDisconnected: TCanDisconnectedEvent;\nend;  </code></pre>"},{"location":"tcansocket/#properties","title":"Properties","text":"Name Description <code>Connected</code> Read only boolean flag to determine if the CAN socket is in the connected state. <code>True</code> if connected. <code>False</code> otherwise. <code>Devices</code> Provides access to the SocketCAN devices detected on the system. <code>Devices.Count</code> returns the total number of SocketCAN devices. Can also be indexed as array <code>Devices[]</code> to obtain the name of a SocketCAN device. <code>Device</code> Name of the SocketCAN device to connect to. E.g. <code>vcan0</code>or  <code>can0</code>. You can use property <code>Devices</code> to determine the names of the SocketCAN devices, currently available on the system."},{"location":"tcansocket/#methods","title":"Methods","text":""},{"location":"tcansocket/#connect","title":"Connect","text":"<pre><code>function Connect: Boolean;\n</code></pre> <p>Connects the SocketCAN device to the CAN bus.</p> Return value <code>True</code> if successfully connected, <code>False</code> otherwise. Example - Connect to the first SocketCAN device detected on the system:<pre><code>procedure TForm1.BtnConnectClick(Sender: TObject);\nbegin\n// Set the SocketCAN device name to the first one detected on the system.\nCanSocket1.Device := CanSocket1.Devices[0];\n// Attempt to connect to the SocketCAN device.\nif CanSocket1.Connect then\nMessageDlg('Info', 'Successfully connected', mtInformation, [mbOk], 0)\nelse\nMessageDlg('Error', 'Could not connect', mtError, [mbOk], 0);\nend;\n</code></pre>"},{"location":"tcansocket/#disconnect","title":"Disconnect","text":"<pre><code>procedure Disconnect;\n</code></pre> <p>Disconnects the device from the CAN bus.</p>"},{"location":"tcansocket/#transmit","title":"Transmit","text":"<pre><code>function Transmit(var Msg: TCanMsg): Boolean;\n</code></pre> <p>Submits a CAN message for transmission. Note that this function writes the timestamp into the <code>Msg</code> parameter.</p> Parameter Description Msg Message to transmit. Return value <code>True</code> if the message was successfully submitted for transmission, <code>False</code> otherwise. Example - Transmit a CAN message:<pre><code>procedure TForm1.BtnTransmitClick(Sender: TObject);\nvar\nTxMsg: TCanMsg;\nbegin\nTxMsg.Id := $123;        // Set the CAN message identifier\nTxMsg.Ext := False;      // Set the identifier type to 11-bit\nTxMsg.Flags.Fd := False; // Configure the message as CAN classic\nTxMsg.Len := 2;          // Set the data length to 2 bytes\nTxMsg.Data[0] := $37;    // Set the value of data byte 0\nTxMsg.Data[1] := $A5;    // Set the value of data byte 1\n// Attempt to submit the CAN message for transmission\nif CanSocket1.Transmit(TxMsg) then\nMessageDlg('Info', 'Successfully transmitted', mtInformation, [mbOk], 0)\nend;\n</code></pre>"},{"location":"tcansocket/#formatmsg","title":"FormatMsg","text":"<pre><code>function FormatMsg(constref Msg: TCanMsg): string;\n</code></pre> <p>Converts a CAN message to a string. </p> Parameter Description <code>Msg</code> CAN message to format as a <code>string</code>. Return value The CAN message formated as a <code>string</code> Example - Display received CAN messages in a TMemo:<pre><code>procedure TForm1.CanSocket1Received(Sender: TObject; constref Msg: TCanMsg);\nvar\nMsgStr: string;\nbegin\n// Convert the newly received message to a string.\nMsgStr := CanSocket1.FormatMsg(Msg);\n// Add the string to the memo.\nMemo1.Lines.Add(MsgStr);\nend;\n</code></pre> <p></p>"},{"location":"tcansocket/#events","title":"Events","text":""},{"location":"tcansocket/#onconnected","title":"OnConnected","text":"<pre><code>property OnConnected: TCanConnectedEvent;\n</code></pre> <p>Event handler that gets called after successfully connecting to the CAN device. Triggered by the <code>Connect</code> method.</p> Example - OnConnected event handler:<pre><code>procedure TForm1.CanSocket1Connected(Sender: TObject);\nbegin\nMessageDlg('Info', 'Successfully connected', mtInformation, [mbOk], 0)\nend;\n</code></pre>"},{"location":"tcansocket/#ondisconnected","title":"OnDisconnected","text":"<pre><code>property OnDisconnected: TCanDisconnectedEvent;\n</code></pre> <p>Event handler that gets called after disconnecting from the CAN device. Triggered by the <code>Disconnect</code> method.</p> Example - OnDisconnected event handler:<pre><code>procedure TForm1.CanSocket1Disconnected(Sender: TObject);\nbegin\nMessageDlg('Info', 'Disconnected from CAN device', mtInformation, [mbOk], 0)\nend;\n</code></pre>"},{"location":"tcansocket/#onreceived","title":"OnReceived","text":"<pre><code>property OnReceived: TCanMsgReceivedEvent;\n</code></pre> <p>Event handler that gets called upon reception of a CAN message.</p> Parameter Description <code>Msg</code> Received CAN message. Example - OnReceived event handler:<pre><code>procedure TForm1.CanSocket1Received(Sender: TObject; constref Msg: TCanMsg);\nvar\nInfoStr: string;\nbegin\nInfoStr := Format('Received CAN message with ID %xh', [Msg.Id]);\nMessageDlg('Info', InfoStr, mtInformation, [mbOk], 0)\nend;\n</code></pre>"},{"location":"tcansocket/#ontransmitted","title":"OnTransmitted","text":"<pre><code>property OnTransmitted: TCanMsgTransmittedEvent;\n</code></pre> <p>Event handler that gets called once a CAN message was successfully submitted for transmission. Triggered by method <code>Transmit</code>.</p> Parameter Description <code>Msg</code> Transmitted CAN message. Example - OnTransmitted event handler:<pre><code>procedure TForm1.CanSocket1Transmitted(Sender: TObject; constref Msg: TCanMsg);\nvar\nInfoStr: string;\nbegin\nInfoStr := Format('Transmitted CAN message with ID %xh', [Msg.Id]);\nMessageDlg('Info', InfoStr, mtInformation, [mbOk], 0)\nend;\n</code></pre>"},{"location":"tcansocket/#onerrorframe","title":"OnErrorFrame","text":"<pre><code>property OnErrorFrame: TCanErrFrameReceivedEvent;\n</code></pre> <p>Event handler that gets called upon reception of an error frame.</p> Example - OnErrorFrame event handler:<pre><code>procedure TForm1.CanSocket1ErrorFrame(Sender: TObject);\nbegin\nMessageDlg('Info', 'Error frame received', mtInformation, [mbOk], 0);\nend;\n</code></pre>"}]}